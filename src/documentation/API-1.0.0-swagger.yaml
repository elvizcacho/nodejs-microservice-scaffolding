openapi: 3.0.0
info:
  version: 1.0.0
  title: Adapter service API
  description: API to consume Evana's service
servers:
  - description: Prod server
    url: https://rest.evana.de/v1.0.0/
  - description: Sandbox server
    url: https://sandbox-rest.evana.de/v1.0.0/
  - description: Beta server
    url: https://beta-rest.evana.de/v1.0.0/
  - description: Local server
    url: http://localhost:5006/v1.0.0/
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    DataTypes:
      type: string
      enum:
        - 'BOOL'
        - 'DATE'
        - 'FLOAT'
        - 'INT'
        - 'TEXT'
      example: TEXT
    UploadFileRequest:
      properties:
        structureId:
          required: true
          type: string
        externalId:
          required: false
          type: string
        analysis:
          required: false
          type: boolean
        securityClassificationId:
          required: false
          type: string
        webhookURL:
          required: false
          type: string
          format: uri
        file:
          required: true
          type: string
          format: binary

    UploadNewFileVersionRequest:
      properties:
        externalId:
          required: false
          type: string
        analysis:
          required: false
          type: boolean
        webhookURL:
          required: false
          type: string
          format: uri
        file:
          required: true
          type: string
          format: binary

    UploadFileResponse:
      type: object
      properties:
        fileId:
          type: string
        documentUrl:
          type: string
          format: uri

    LoginRequest:
      type: object
      properties:
        email:
          required: true
          type: string
          example: "testuser@evana.de"
          format: email
        password:
          required: true
          type: string
          example: "Q9~N_Ijy3u"

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              msg:
                type: string
              param:
                type: string
              location:
                type: string
                enum: [body, header, params]

    AnalysisResponse:
      properties:
        total:
          type: number
          example: 1
        items:
          type: array
          items:
            properties:
              id:
                type: string
                example: 5f8851baebf0c0c5f2333148
              name:
                type: array
                items:
                  properties:
                    locale:
                      example: de
                      type: string
                    value:
                      example: Testers
                      type: string
              description:
                type: array
                items:
                  properties:
                    locale:
                      type: string
                      example: de
                    value:
                      type: string
                      example: Test
              values:
                type: array
                items:
                  properties:
                    type:
                      $ref: '#/components/schemas/DataTypes'
                    value:
                      type: string
              createdBy:
                type: string
                example: 5f2277e14e62533d50999cb5
              editedBy:
                type: string
                example: 5f2277e14e62533d50999cb5
              createdAt:
                type: string
                format: date-time
                example: 2020-10-15T13:42:18.920Z
              editedAt:
                type: string
                format: date-time
                example: 2020-10-15T13:43:46.987Z
    WebhookBody:
      properties:
        fileId:
          type: string
          example: 5f90288bc765f6006aaeb9a2
        analysisStatus:
          type: string
          enum:
            - FINISH
          example: FINISH
        externalId:
          type: string
          example: 5f90288bc765f6006aaeb9a3
    StructuresResponse:
      properties:
        total:
          type: number
          example: 17
        items:
          type: array
          items:
            properties:
              id:
                type: string
                example: 5f8fec27673c93f84ba88b73
              path:
                type: string
                example: 5f8fec27673c93f84ba88b72, 5f8fec27673c93f84ba88b71
              name:
                type: string
                example: GT-Test
              priority:
                type: number
                example: 30
              groupPermissions:
                type: array
                items:
                  properties:
                    group:
                      type: string
                      example: 5df77b6a11be87fba518d807
                    permissions:
                      type: array
                      items:
                        type: string
                        example: FILE_EDIT
                        enum:
                          - FILE_EDIT
                          - FOLDER_EDIT
                          - VISIBLE
              blueprints:
                type: array
                items:
                  type: string
                  example: 5f86b0578345942a6125ff17
              dimensionsDefault:
                type: array
                items:
                  type: string
                  example: 5f86b0578345942a6125ff19
              createdAt:
                type: string
                example: 2020-10-13T11:51:32.878Z
              createdBy:
                type: string
                example: 5f2277e14e62533d50999cb5
              editedAt:
                type: string
                example: 2020-10-13T11:51:32.878Z
              editedBy:
                type: string
                example: 5f2277e14e62533d50999cb5
    MetaDataResponse:
      properties:
        id:
          type: string
          example: 5f9f3f65f612e415ef06b0c3
        structure:
          type: string
          example: 5df77b7c11be8710cb18d809
        name:
          type: string
          example: _63518102_78d64310-d2c7-4d90-b991-b11ab12ddd9e.jpg
        mimeType:
          type: string
          example: image/jpeg
        length:
          type: number
          example: 251624
        uploadedBy:
          type: string
          example: 5df7877211be87a26618d84c
        uploadedAt:
          type: string
          example: 2020-11-01T23:07:21.643Z
        status:
          type: string
          enum:
            - CLARIFY_CONSULTATION
            - CLARIFY_DRAFT
            - CLARIFY_INCOMPLETE
            - CLARIFY_OTHER
            - CLARIFY_OUTDATED
            - CLARIFY_UNKNOWN
            - CLARIFY_UNREADABLE_CONTENT
            - CLARIFY_UNREADABLE_FORMAT
            - CONFIRMED
            - REJECTED_DUPLICATE
            - REJECTED_SERVICE
            - UNPROCESSED
            - UNSUITABLE
        editedAt:
          type: string
          example: 2020-10-13T11:51:32.878Z

    FileLinkResponse:
      properties:
        link:
          type: string
          format: uri

    DownloadDocumentResponse:
      type: string
      format: binary

    UpdateKeyDataValuesRequest:
      type: array
      items:
        properties:
          position:
            type: object
            properties:
              fromPage:
                type: number
                required: true
                example: 1
              toPage:
                type: number
                required: true
                example: 2
              fromWord:
                type: number
                required: true
                example: 1
              toWord:
                type: number
                required: true
                example: 1
          marked:
            type: string
            example: Hola cacao
            required: true
          type:
            $ref: '#/components/schemas/DataTypes'
    SecurityClassificationResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: array
          items:
            properties:
              value:
                type: string
              locale:
                type: string
        description:
          type: array
          items:
            properties:
              value:
                type: string
              locale:
                type: string
    CreateMasterDataRequest:
      properties:
        structureId:
          type: string
          required: true
        dimensionTypeId:
          type: string
          required: true
        dataModelId:
          type: string
          required: true
        name:
          type: string
          required: true
        keyIds:
          type: array
          items:
            type: string

    CreateMasterDataResponse:
      properties:
        id:
          type: string
        structureId:
          type: string
        dimensionTypeId:
          type: string
        name:
          type: string
        keyIds:
          type: array
          items:
            type: string
        createdBy:
          type: string
        createdAt:
          type: string
        editedBy:
          type: string
        editedAt:
          type: string
paths:
  /login:
    post:
      summary: Logs into Evana's api
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: LogIn was successful and a token is provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files:
    post:
      summary: Upload file to Evana
      operationId: uploadFile
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFileRequest'
      responses:
        200:
          description: File was successfully received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}:
    get:
      summary: Download file
      operationId: downloadFile
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: document was downloaded
          content:
            application/pdf:
              schema:
                $ref: '#/components/schemas/DownloadDocumentResponse'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/DownloadDocumentResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Upload new file version to Evana
      operationId: uploadNewFileVersion
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadNewFileVersionRequest'
      responses:
        200:
          description: File was successfully received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/analysis:
    get:
      summary: Get the analysis of a file
      operationId: getAnalysis
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: Analysis was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/masterData:
    get:
      summary: Get the master data of a file
      operationId: getMasterData
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: File's master data was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/masterData/{masterDataId}:
    put:
      summary: Update master data
      operationId: updateMasterData
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
        - in: path
          name: masterDataId
          schema:
            type: string
          required: true
          description: master data Id
      responses:
        204:
          description: Master data was successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/metaData:
    get:
      summary: Get the meta data of a file
      operationId: getMetaData
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: File's meta data was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaDataResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/link:
    get:
      summary: Get file link
      operationId: getFileLink
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: File's link was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLinkResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/thumbnail:
    get:
      summary: Get file thumbnail
      operationId: getFileThumbnail
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: File thumbnail was downloaded
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/DownloadDocumentResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /files/{id}/securityClassification:
    get:
      summary: Get security classification
      operationId: getSecurityClassification
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: file Id
      responses:
        200:
          description: Security classification was successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityClassificationResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /structures:
    get:
      summary: Get structures
      operationId: getStructures
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filter by structure's name
        - in: query
          name: path
          schema:
            type: string
          required: false
          description: Filter by structure's path. path is a list of ids separated by comma, e.g 5f2277e14e62533d50999cb5,5f2277e14e62533d50999cb7
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: limit of structures to be retrieved
        - in: query
          name: offset
          schema:
            type: number
          required: false
          description: structures to be skiped in query result
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - created
              - edited
              - name
              - priority
          required: false
          description: sort by selected field
        - in: query
          name: order
          schema:
            type: string
            enum:
              - desc
              - asc
          required: false
          description: order of the result descending or ascending

      responses:
        200:
          description: Structures were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuresResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'

  /keys/{id}:
    patch:
      summary: Update key data values
      operationId: updateKey
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyDataValuesRequest'
      responses:
        204:
          description: Key data values were updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'
  /masterData:
    post:
      summary: Create master data
      operationId: createMasterData
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMasterDataRequest'
      responses:
        200:
          description: Create master data response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMasterDataResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        503:
          $ref: '#/components/responses/503'
        500:
          $ref: '#/components/responses/500'
